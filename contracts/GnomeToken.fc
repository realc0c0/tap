;; GNOME Token Contract
;; This is a FunC smart contract for the GNOME token on TON blockchain

#include "imports/stdlib.fc";
#include "imports/params.fc";
#include "imports/op-codes.fc";

;; Storage variables
global int total_supply;            ;; Total token supply
global cell owner_address;          ;; Contract owner address
global cell token_wallet_code;      ;; Token wallet code
global cell content;                ;; Token content (metadata)

;; Initialize storage
() load_data() impure {
    slice ds = get_data().begin_parse();
    total_supply = ds~load_coins();
    owner_address = ds~load_ref();
    token_wallet_code = ds~load_ref();
    content = ds~load_ref();
}

;; Save storage
() save_data() impure {
    set_data(begin_cell()
        .store_coins(total_supply)
        .store_ref(owner_address)
        .store_ref(token_wallet_code)
        .store_ref(content)
        .end_cell());
}

;; Get wallet address for owner
slice calculate_user_wallet_address(slice owner_address) {
    cell state_init = calculate_user_wallet_state_init(owner_address);
    return calculate_address(state_init);
}

;; Mint tokens
() mint_tokens(slice to_address, int amount) impure {
    throw_unless(73, equal_slices(owner_address, sender_address()));
    slice wallet_address = calculate_user_wallet_address(to_address);
    var msg = begin_cell()
        .store_uint(op::internal_transfer(), 32)
        .store_uint(0, 64)
        .store_coins(amount)
        .store_slice(to_address)
        .end_cell();
    send_raw_message(msg, 1);
    total_supply += amount;
    save_data();
}

;; Burn tokens
() burn_tokens(slice from_address, int amount) impure {
    slice wallet_address = calculate_user_wallet_address(from_address);
    throw_unless(74, equal_slices(wallet_address, sender_address()));
    total_supply -= amount;
    save_data();
}

;; Get methods
int get_total_supply() method_id {
    load_data();
    return total_supply;
}

slice get_wallet_address(slice owner_address) method_id {
    return calculate_user_wallet_address(owner_address);
}

;; Contract main entry point
() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { 
        return (); 
    }
    
    load_data();
    int op = in_msg_body~load_uint(32);
    
    if (op == op::mint_tokens()) {
        slice to_address = in_msg_body~load_msg_addr();
        int amount = in_msg_body~load_coins();
        mint_tokens(to_address, amount);
        return ();
    }
    
    if (op == op::burn_tokens()) {
        slice from_address = in_msg_body~load_msg_addr();
        int amount = in_msg_body~load_coins();
        burn_tokens(from_address, amount);
        return ();
    }
    
    throw(0xffff);
}
